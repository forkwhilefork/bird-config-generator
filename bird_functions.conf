function has_bogon_asn()
int set bogon_asns;
{
    bogon_asns = BOGON_ASNS;
    if ( bgp_path ~ bogon_asns ) then {
        #print "Reject: bogon AS_PATH: ", net, " ", bgp_path;
        return true;
    }
    return false;
}

function is_bogon_prefix()
prefix set bogon_prefixes;
{
    if ( net.type = NET_IP4 ) then {
        bogon_prefixes = BOGON_PREFIXESv4;
    } else {
        bogon_prefixes = BOGON_PREFIXESv6;
    }
    
    if (net ~ bogon_prefixes) then {
        #print "Reject: Bogon prefix: ", net, " ", bgp_path;
        return true;
    }
    return false;
}

function is_small_prefix()
int prefix_length;
{   
    if ( net.type = NET_IP4 ) then {
        prefix_length = 24;
    } else {
        prefix_length = 48;
    }
    if (net.len > prefix_length) then {
        #print "Reject: Too small prefix: ", net, " ", bgp_path;
        return true;
    }
    return false;
}

function is_default()
{   
    if (net.len = 0) then {
        #print "Reject: default route: ", net, " ", bgp_path;
        return true;
    }
    return false;
}

function has_long_aspath()
{
    if ( bgp_path.len > 100 ) then {
        #print "Reject: Too long AS path: ", net, " ", bgp_path;
        return true;
    }
    return false;
}

function is_rpki_invalid()
{
    if ( net.type = NET_IP4 ) then {
        return roa_check(roa_v4, net, bgp_path.last) = ROA_INVALID;
    } else {
        return roa_check(roa_v6, net, bgp_path.last) = ROA_INVALID;
    }
}

function net_local()
{
    if ( net.type = NET_IP4 ) then {
        return net ~ MY_V4_NETS;
    } else {
        return net ~ MY_V6_NETS;
    }
}

function rt_import_customer(int peer_asn; prefix set peer_nets)
{
    if has_bogon_asn() then return false;
    if is_bogon_prefix() then return false;
    if has_long_aspath() then return false;
    if is_small_prefix() then return false;
    if is_rpki_invalid() then return false;
    if ! (net ~ peer_nets) then return false;
    if bgp_path.first != peer_asn then return false;
    if bgp_next_hop != from then return false;
    return true;
}

function rt_import_transit(int peer_asn)
{
    if has_bogon_asn() then return false;
    if is_bogon_prefix() then return false;
    if has_long_aspath() then return false;
    if is_small_prefix() then return false;
    if is_default() then return false;
    if is_rpki_invalid() then return false;
    if net_local() then return false;
    if bgp_path.first != peer_asn then return false;
    if bgp_next_hop != from then return false;
    return true;
}

function rt_import_peer(int peer_asn; prefix set peer_nets)
{
    if has_bogon_asn() then return false;
    if is_bogon_prefix() then return false;
    if has_long_aspath() then return false;
    if is_small_prefix() then return false;
    if is_rpki_invalid() then return false;
    if ! (net ~ peer_nets) then return false;
    if bgp_path.first != peer_asn then return false;
    if bgp_next_hop != from then return false;
    return true;
}

function rt_export_transit()
{
     if has_bogon_asn() then return false;
    if is_bogon_prefix() then return false;
    if has_long_aspath() then return false;
    if ((MY_AS,ALLOW_SMALL_PREFIX,0) ~ bgp_large_community) then {
        bgp_large_community.delete([(MY_AS, ALLOW_SMALL_PREFIX, 0)]);
    } else {
        if is_small_prefix() then return false;
    }
    if (MY_AS,INFO_SOURCE,FROM_TRANSIT) ~ bgp_large_community then return false;
    if (MY_AS,INFO_SOURCE,FROM_PUBLIC_PEER) ~ bgp_large_community then return false;
    if (MY_AS,INFO_SOURCE,FROM_PRIVATE_PEER) ~ bgp_large_community then return false;

    if source !~ [ RTS_BGP ] then {
        bgp_large_community.add((MY_AS,INFO_SOURCE,ORIGINATED));
    }

    return true;
}

function rt_export_customer()
{
    if has_bogon_asn() then return false;
    if is_bogon_prefix() then return false;
    if has_long_aspath() then return false;
    if is_small_prefix() then return false;
    
    if source !~ [ RTS_BGP ] then {
        bgp_large_community.add((MY_AS,INFO_SOURCE,ORIGINATED));
    }

return true;
}

function rt_export_peer()
{
    if has_bogon_asn() then return false;
    if is_bogon_prefix() then return false;
    if has_long_aspath() then return false;
    if ((MY_AS,ALLOW_SMALL_PREFIX,0) ~ bgp_large_community) then {
        bgp_large_community.delete([(MY_AS, ALLOW_SMALL_PREFIX, 0)]);
    } else {
        if is_small_prefix() then return false;
    }
    if (MY_AS,INFO_SOURCE,FROM_TRANSIT) ~ bgp_large_community then return false;
    if (MY_AS,INFO_SOURCE,FROM_PUBLIC_PEER) ~ bgp_large_community then return false;
    if (MY_AS,INFO_SOURCE,FROM_PRIVATE_PEER) ~ bgp_large_community then return false;

    if source !~ [ RTS_BGP ] then {
        bgp_large_community.add((MY_AS,INFO_SOURCE,ORIGINATED));
    }

    return true;
}

function apply_export_communities(int peer_asn)
{
    if ((MY_AS,DO_NOT_ANNOUNCE,0) ~ bgp_large_community || (MY_AS,DO_NOT_ANNOUNCE,peer_asn) ~ bgp_large_community) then {
        reject;
    } else if ((MY_AS,PREPEND_3,0) ~ bgp_large_community || (MY_AS,PREPEND_3,peer_asn) ~ bgp_large_community) then {
        bgp_path.prepend(MY_AS);
        bgp_path.prepend(MY_AS);
        bgp_path.prepend(MY_AS);
    } else if ((MY_AS,PREPEND_2,0) ~ bgp_large_community || (MY_AS,PREPEND_2,peer_asn) ~ bgp_large_community) then {
        bgp_path.prepend(MY_AS);
        bgp_path.prepend(MY_AS);
    } else if ((MY_AS,PREPEND_1,0) ~ bgp_large_community || (MY_AS,PREPEND_1,peer_asn) ~ bgp_large_community) then {
        bgp_path.prepend(MY_AS);
    }
}
