function check_has_bogon_asn()
{
    return ( bgp_path ~ BOGON_ASNS );
}

function check_is_bogon_prefix()
{
    if ( net.type = NET_IP4 ) then {
        return (net ~ BOGON_PREFIXESv4);
    } else {
        return (net ~ BOGON_PREFIXESv6);
    }
}

function check_is_small_prefix()
{   
    if ( net.type = NET_IP4 ) then {
        return (net.len > 24);
    } else {
        return (net.len > 48);
    }
}

function check_is_default()
{   
    return (net.len = 0);
}

function check_has_long_aspath()
{
    return ( bgp_path.len > 100 );
}

function check_is_rpki_invalid()
{
    if ( net.type = NET_IP4 ) then {
        return roa_check(roa_v4, net, bgp_path.last) = ROA_INVALID;
    } else {
        return roa_check(roa_v6, net, bgp_path.last) = ROA_INVALID;
    }
}

function check_has_transit_asn()
{
        return (bgp_path ~ TRANSIT_ASNS);
}

function import_customer_peer(prefix set allowed_prefixes)
{
    if check_has_bogon_asn() then {
        bgp_large_community.add((MY_AS,INFO_FILTER_REASON,HAS_BOGON_ASN));
        return false;
    }
    if check_is_bogon_prefix() then {
        bgp_large_community.add((MY_AS,INFO_FILTER_REASON,IS_BOGON_PREFIX));
        return false;
    }
    if check_has_long_aspath() then {
        bgp_large_community.add((MY_AS,INFO_FILTER_REASON,ASPATH_TOO_LONG));
        return false;
    }
    if check_is_small_prefix() then {
        bgp_large_community.add((MY_AS,INFO_FILTER_REASON,PREFIX_TOO_LONG));
        return false;
    }
    if check_is_default() then {
        bgp_large_community.add((MY_AS,INFO_FILTER_REASON,IS_DEFAULT));
        return false;
    }
    if check_is_rpki_invalid() then {
        bgp_large_community.add((MY_AS,INFO_FILTER_REASON,IS_RPKI_INVALID));
        return false;
    }
    if bgp_next_hop != from then {
        bgp_large_community.add((MY_AS,INFO_FILTER_REASON,NEXTHOP_IP_NOT_MATCH_PEER));
        return false;
    }
    if ! (net ~ allowed_prefixes) then {
        bgp_large_community.add((MY_AS,INFO_FILTER_REASON,PREFIX_NOT_ALLOWED));
        return false;
    }
    if check_has_transit_asn() then {
        bgp_large_community.add((MY_AS,INFO_FILTER_REASON,HAS_TRANSIT_ASN));
        return false;
    }

    #if ([(MY_AS,INFO_FILTER_REASON,*)] ~ bgp_large_community) then {
    #    return false;
    #}
    return true;
}

function import_customer(prefix set allowed_prefixes)
{
    return import_customer_peer(allowed_prefixes);
}

function import_peer(prefix set allowed_prefixes)
{
    return import_customer_peer(allowed_prefixes);
}

function import_transit()
{
    if check_has_bogon_asn() then {
        bgp_large_community.add((MY_AS,INFO_FILTER_REASON,HAS_BOGON_ASN));
        return false;
    }
    if check_is_bogon_prefix() then {
        bgp_large_community.add((MY_AS,INFO_FILTER_REASON,IS_BOGON_PREFIX));
        return false;
    }
    if check_has_long_aspath() then {
        bgp_large_community.add((MY_AS,INFO_FILTER_REASON,ASPATH_TOO_LONG));
        return false;
    }
    if check_is_small_prefix() then {
        bgp_large_community.add((MY_AS,INFO_FILTER_REASON,PREFIX_TOO_LONG));
        return false;
    }
    if check_is_default() then {
        bgp_large_community.add((MY_AS,INFO_FILTER_REASON,IS_DEFAULT));
        return false;
    }
    if check_is_rpki_invalid() then {
        bgp_large_community.add((MY_AS,INFO_FILTER_REASON,IS_RPKI_INVALID));
        return false;
    }
    if bgp_next_hop != from then {
        bgp_large_community.add((MY_AS,INFO_FILTER_REASON,NEXTHOP_IP_NOT_MATCH_PEER));
        return false;
    }

    #if ([(MY_AS,INFO_FILTER_REASON,*)] ~ bgp_large_community) then {
    #    return false;
    #}
    return true;
}

function import_route_server()
{
    if check_has_bogon_asn() then {
        bgp_large_community.add((MY_AS,INFO_FILTER_REASON,HAS_BOGON_ASN));
        return false;
    }
    if check_is_bogon_prefix() then {
        bgp_large_community.add((MY_AS,INFO_FILTER_REASON,IS_BOGON_PREFIX));
        return false;
    }
    if check_has_long_aspath() then {
        bgp_large_community.add((MY_AS,INFO_FILTER_REASON,ASPATH_TOO_LONG));
        return false;
    }
    if check_is_small_prefix() then {
        bgp_large_community.add((MY_AS,INFO_FILTER_REASON,PREFIX_TOO_LONG));
        return false;
    }
    if check_is_default() then {
        bgp_large_community.add((MY_AS,INFO_FILTER_REASON,IS_DEFAULT));
        return false;
    }
    if check_is_rpki_invalid() then {
        bgp_large_community.add((MY_AS,INFO_FILTER_REASON,IS_RPKI_INVALID));
        return false;
    }

    #if ([(MY_AS,INFO_FILTER_REASON,*)] ~ bgp_large_community) then {
    #    return false;
    #}
    return true;
}

function export_customer_full(bool send_default)
{
    if check_has_bogon_asn() then return false;
    if check_is_bogon_prefix() then return false;
    if check_has_long_aspath() then return false;
    if check_is_small_prefix() then return false;
    if !send_default then {
        if check_is_default() then return false;
    }
    if check_is_rpki_invalid() then return false;

    return true;
}

function export_customer_default()
{
    if check_is_default() then return true;
    
    return false;
}

function export_peer_transit()
{
    if check_has_bogon_asn() then return false;
    if check_is_bogon_prefix() then return false;
    if check_has_long_aspath() then return false;
    if ((MY_AS,ALLOW_SMALL_PREFIX,0) ~ bgp_large_community) then {
        bgp_large_community.delete([(MY_AS, ALLOW_SMALL_PREFIX, 0)]);
    } else {
        if check_is_small_prefix() then return false;
    }
    if check_is_default() then return false;

    # allow originated prefixes before checking RPKI validity
    if (MY_AS,INFO_SOURCE,ORIGINATED) ~ bgp_large_community then return true;

    if check_is_rpki_invalid() then return false;

    if (MY_AS,INFO_SOURCE,FROM_CUSTOMER) ~ bgp_large_community then return true;

    return false;
}

function export_peer()
{
    return export_peer_transit();
}

function export_transit()
{
    return export_peer_transit();
}

function apply_export_communities(int peer_asn)
{
    if ((MY_AS,DO_NOT_ANNOUNCE,0) ~ bgp_large_community || (MY_AS,DO_NOT_ANNOUNCE,peer_asn) ~ bgp_large_community) then {
        reject;
    } else if ((MY_AS,PREPEND_3,0) ~ bgp_large_community || (MY_AS,PREPEND_3,peer_asn) ~ bgp_large_community) then {
        bgp_path.prepend(MY_AS);
        bgp_path.prepend(MY_AS);
        bgp_path.prepend(MY_AS);
    } else if ((MY_AS,PREPEND_2,0) ~ bgp_large_community || (MY_AS,PREPEND_2,peer_asn) ~ bgp_large_community) then {
        bgp_path.prepend(MY_AS);
        bgp_path.prepend(MY_AS);
    } else if ((MY_AS,PREPEND_1,0) ~ bgp_large_community || (MY_AS,PREPEND_1,peer_asn) ~ bgp_large_community) then {
        bgp_path.prepend(MY_AS);
    }
}
