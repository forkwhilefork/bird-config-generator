{% if config.static_routes_v4 is defined %}
    protocol static static_v4 {
        ipv4 {
            import filter {{ config.static_routes_v4.filter_name }};
        };

        {% for route in config.static_routes_v4.routes %}
            {% if route.blackhole %}
                route {{ route.destination }} reject;
            {% else %}
                route {{ route.destination }} via {{ route.next_hop }};
            {% endif %}
        {% endfor %}
    }
{% endif %}

{% if config.static_routes_v6 is defined %}
    protocol static static_v6 {
        ipv6 {
            import filter {{ config.static_routes_v6.filter_name }};
        };

        {% for route in config.static_routes_v6.routes %}
            {% if route.blackhole %}
                route {{ route.destination }} reject;
            {% else %}
                route {{ route.destination }} via {{ route.next_hop }};
            {% endif %}
        {% endfor %}
    }
{% endif %}

{% for rpki in config.rpki_protocols %}
    protocol rpki {{ rpki.name }} {
        roa4 { table {{ rpki.roa4_table }}; };
        roa6 { table {{ rpki.roa6_table }}; };
        {% if rpki.port is defined %}
            remote "{{ rpki.ip }}" port {{ rpki.port }};
        {% else %}
            remote "{{ rpki.ip }}";
        {% endif %}
        {% if rpki.retry_keep is defined %}
            retry keep {{ rpki.retry_time }};
        {% else %}
            retry {{ rpki.retry_time }};
        {% endif %}
        {% if rpki.refresh_keep is defined %}
            refresh keep {{ rpki.refresh_time }};
        {% else %}
            refresh {{ rpki.refresh_time }};
        {% endif %}
        {% if rpki.expire_keep is defined %}
            expire keep {{ rpki.expire_time }};
        {% else %}
            expire {{ rpki.expire_time }};
        {% endif %}
    }
{% endfor %}

{% for session in config.bgp_sessions %}
    {% if session.type != "internal" and session.type != "collector" %}
        filter bgp_in_{{ session.type }}_{{ session.name }} {
            {% if session.type == "transit" %}
                if ! rt_import_transit({{ session.asn }}) then reject;
            {% elif session.type == "customer" %}
                if ( net.type = NET_IP4 ) then {
                    {% if session.ipv4 is defined %}
                        if ! rt_import_customer({{ session.asn }}, [{{ session.ipv4.prefixes_str }}])
                        then reject;
                    {% else %}
                        reject;
                    {% endif %}
                } else {
                    {% if session.ipv6 is defined %}
                        if ! rt_import_customer({{ session.asn }}, [{{ session.ipv6.prefixes_str }}])
                        then reject;
                    {% else %}
                        reject;
                    {% endif %}
                }
            {% elif session.type == "peer" %}
                if ( net.type = NET_IP4 ) then {
                    {% if session.ipv4 is defined %}
                        if ! rt_import_peer({{ session.asn }}, [{{ session.ipv4.prefixes_str }}])
                        then reject;
                    {% else %}
                        reject;
                    {% endif %}
                } else {
                    {% if session.ipv6 is defined %}
                        if ! rt_import_peer({{ session.asn }}, [{{ session.ipv6.prefixes_str }}])
                        then reject;
                    {% else %}
                        reject;
                    {% endif %}
                }
            {% endif %}

            bgp_large_community.delete([(MY_AS, INFO_SOURCE, *)]);
            bgp_large_community.delete([(MY_AS, INFO_AS, *)]);
            {% if session.type == "transit" %}
                bgp_large_community.add((MY_AS,INFO_SOURCE,FROM_TRANSIT));
            {% elif session.type == "customer" %}
                bgp_large_community.add((MY_AS,INFO_SOURCE,FROM_CUSTOMER));
            {% elif session.type == "peer" %}
                bgp_large_community.add((MY_AS,INFO_SOURCE,FROM_PUBLIC_PEER));
            {% endif %}
                bgp_large_community.add((MY_AS,INFO_AS,{{ session.asn }}));
            accept;
        }
    {% endif %}

    filter bgp_out_{{ session.type }}_{{ session.name }} {
        {% if session.type == "transit" %}
            if ! rt_export_transit() then reject;
            {% if session.backup %}
                bgp_path.prepend(MY_AS);
            {% endif %}
        {% elif session.type == "customer" or session.type == "collector" or session.type == "internal" %}
            if ! rt_export_customer() then reject;
        {% elif session.type == "peer" %}
            if ! rt_export_peer() then reject;
        {% endif %}

        {% if session.type != "internal" %}
            apply_export_communities({{ session.asn }});
        {% endif %}

        {% if session.prepends is defined %}
            {% for n in range(session.prepends) %}
                bgp_path.prepend(MY_AS);
            {% endfor %}
        {% endif %}

        accept;
    }

    {% if session.ipv4 is defined %}
        protocol bgp bgp_{{ session.type }}_{{ session.name }}_v4 {
            {% if session.multihop %}
                multihop;
            {% endif %}
            ipv4 {
                {% if session.stop_bgp %}
                    import keep filtered;
                    import none;
                    export none;
                {% else %}
                    {% if session.type == "internal" %}
                        import all;
                        export filter bgp_out_{{ session.type }}_{{ session.name }};
                        next hop self;
                    {% elif session.type == "collector" %}
                        import none;
                        export filter bgp_out_{{ session.type }}_{{ session.name }};
                    {% else %}
                        import keep filtered;
                        import filter bgp_in_{{ session.type }}_{{ session.name }};
                        {% if session.ipv4.prefix_limit is defined %}
                            import limit {{ session.ipv4.prefix_limit }} action block;
                        {% endif %}
                        export filter bgp_out_{{ session.type }}_{{ session.name }};
                    {% endif %}
                {% endif %}
            };

            {% if session.ipv4.password is defined %}
                password "{{ session.ipv4.password }}";
            {% endif %}
            local as MY_AS;
            {% if session.type == "internal" %}
                neighbor {{ session.ipv4.peer_ip }} as MY_AS;
            {% else %}
                neighbor {{ session.ipv4.peer_ip }} as {{ session.asn }};
                default bgp_local_pref {{ session.local_pref }};
            {% endif %}
            {% if session.ipv4.source_ip is defined %}
                source address {{ session.ipv4.source_ip }};
            {% endif %}
        }
    {% endif %}

    {% if session.ipv6 is defined %}
        protocol bgp bgp_{{ session.type }}_{{ session.name }}_v6 {
            {% if session.multihop %}
                multihop;
            {% endif %}
            ipv6 {
                {% if session.stop_bgp %}
                    import keep filtered;
                    import none;
                    export none;
                {% else %}
                    {% if session.type == "internal" %}
                        import all;
                        export filter bgp_out_{{ session.type }}_{{ session.name }};
                        next hop self;
                    {% elif session.type == "collector" %}
                        import none;
                        export filter bgp_out_{{ session.type }}_{{ session.name }};
                    {% else %}
                        import keep filtered;
                        import filter bgp_in_{{ session.type }}_{{ session.name }};
                        {% if session.ipv6.prefix_limit is defined %}
                            import limit {{ session.ipv6.prefix_limit }} action block;
                        {% endif %}
                        export filter bgp_out_{{ session.type }}_{{ session.name }};
                    {% endif %}
                {% endif %}
            };

            {% if session.ipv6.password is defined %}
                password "{{ session.ipv6.password }}";
            {% endif %}
            local as MY_AS;
            {% if session.type == "internal" %}
                neighbor {{ session.ipv6.peer_ip }} as MY_AS;
            {% else %}
                neighbor {{ session.ipv6.peer_ip }} as {{ session.asn }};
                default bgp_local_pref {{ session.local_pref }};
            {% endif %}
            {% if session.ipv6.source_ip is defined %}
                source address {{ session.ipv6.source_ip }};
            {% endif %}
        }
    {% endif %}
{% endfor %}