{% if config.device is defined %}
    {% if not config.device.disabled %}
        protocol device {
            {% if config.device.scan_time is defined %}
                scan time {{ config.device.scan_time }};
            {% endif %}
        }
    {% endif %}
{% else %}
    protocol device {
        scan time 10;
    }
{% endif %}

{% if config.kernel is defined %}
    {% if not config.kernel.disabled %}
        protocol kernel {
            ipv4 {
                export all;
            };
            {% if config.kernel.scan_time is defined %}
                scan time {{ config.kernel.scan_time }};
            {% endif %}
        }

        protocol kernel {
            ipv6 {
                export all;
            };
            {% if config.kernel.scan_time is defined %}
                scan time {{ config.kernel.scan_time }};
            {% endif %}
        }
    {% endif %}
{% else %}
    protocol kernel {
        ipv4 {
            export all;
        };
        scan time 10;
    }

    protocol kernel {
        ipv6 {
            export all;
        };
        scan time 10;
}
{% endif %}


filter static_in {

    {% for route in config.static_routes_v4 %}
        {% if route.communities is defined %}
            if net ~ [ {{ route.destination }} ] then {
                {% for community in route.communities %}
                    bgp_large_community.add(({{ community[0] }}, {{ community[1] }}, {{ community[2] }}));
                {% endfor %}
            }
        {% endif %}
    {% endfor %}

    {% for route in config.static_routes_v6 %}
        {% if route.communities is defined %}
            if net ~ [ {{ route.destination }} ] then {
                {% for community in route.communities %}
                    bgp_large_community.add(({{ community[0] }}, {{ community[1] }}, {{ community[2] }}));
                {% endfor %}
            }
        {% endif %}
    {% endfor %}

    accept;
}

{% if config.static_routes_v4 is defined %}
    protocol static static_v4 {
        ipv4 {
            import filter static_in;
        };

        {% for route in config.static_routes_v4 %}
            {% if route.blackhole %}
                route {{ route.destination }} reject;
            {% else %}
                route {{ route.destination }} via {{ route.next_hop }};
            {% endif %}
        {% endfor %}
    }
{% endif %}

{% if config.static_routes_v6 is defined %}
    protocol static static_v6 {
        ipv6 {
            import filter static_in;
        };

        {% for route in config.static_routes_v6 %}
            {% if route.blackhole %}
                route {{ route.destination }} reject;
            {% else %}
                route {{ route.destination }} via {{ route.next_hop }};
            {% endif %}
        {% endfor %}
    }
{% endif %}

filter direct_in {

    {% for route in config.connected_route_communities %}
        if net ~ [ {{ route.destination }} ] then {
            {% for community in route.communities %}
                bgp_large_community.add(({{ community[0] }}, {{ community[1] }} , {{ community[2] }}));
            {% endfor %}
        }
    {% endfor %}

    accept;
}

protocol direct {
    ipv4 {
        import filter direct_in;
    };
    ipv6 {
        import filter direct_in;
    };
}


filter ospf_in {

    {% for route in config.ospf_route_communities %}
        if net ~ [ {{ route.destination }} ] then {
            {% for community in route.communities %}
                bgp_large_community.add(({{ community[0] }}, {{ community[1] }} , {{ community[2] }}));
            {% endfor %}
        }
    {% endfor %}

    accept;
}

{% for rpki in config.rpki_protocols %}
    protocol rpki rpki_{{ rpki.name }} {
        roa4 { table {{ rpki.roa4_table }}; };
        roa6 { table {{ rpki.roa6_table }}; };
        {% if rpki.port is defined %}
            remote "{{ rpki.ip }}" port {{ rpki.port }};
        {% else %}
            remote "{{ rpki.ip }}";
        {% endif %}
        {% if rpki.retry_keep is defined %}
            retry keep {{ rpki.retry_time }};
        {% else %}
            retry {{ rpki.retry_time }};
        {% endif %}
        {% if rpki.refresh_keep is defined %}
            refresh keep {{ rpki.refresh_time }};
        {% else %}
            refresh {{ rpki.refresh_time }};
        {% endif %}
        {% if rpki.expire_keep is defined %}
            expire keep {{ rpki.expire_time }};
        {% else %}
            expire {{ rpki.expire_time }};
        {% endif %}
    }
{% endfor %}

{% for session in config.bgp_sessions %}
    {% if session.type != "internal" and session.type != "collector" %}
        filter bgp_in_{{ session.type }}_{{ session.name }} {
            bgp_large_community.delete([(MY_AS, INFO_FILTER_REASON, *)]);
            bgp_large_community.delete([(MY_AS, INFO_SOURCE, *)]);
            bgp_large_community.delete([(MY_AS, INFO_AS, *)]);
            {% if session.type == "transit" %}
                bgp_large_community.add((MY_AS,INFO_SOURCE,FROM_TRANSIT));
            {% elif session.type == "customer" %}
                bgp_large_community.add((MY_AS,INFO_SOURCE,FROM_CUSTOMER));
            {% elif session.type == "peer" %}
                bgp_large_community.add((MY_AS,INFO_SOURCE,FROM_PUBLIC_PEER));
            {% endif %}
            bgp_large_community.add((MY_AS,INFO_AS,{{ session.asn }}));

            {% if session.type == "transit" %}
                if ! import_transit() then reject;
            {% elif session.type == "customer" %}
                if ( net.type = NET_IP4 ) then {
                    {% if session.ipv4 is defined %}
                        if ! import_customer([{{ session.ipv4.prefixes_str }}])
                        then reject;
                    {% else %}
                        reject;
                    {% endif %}
                } else {
                    {% if session.ipv6 is defined %}
                        if ! import_customer([{{ session.ipv6.prefixes_str }}])
                        then reject;
                    {% else %}
                        reject;
                    {% endif %}
                }
            {% elif session.type == "peer" %}
                if ( net.type = NET_IP4 ) then {
                    {% if session.ipv4 is defined %}
                        if ! import_peer([{{ session.ipv4.prefixes_str }}])
                        then reject;
                    {% else %}
                        reject;
                    {% endif %}
                } else {
                    {% if session.ipv6 is defined %}
                        if ! import_peer([{{ session.ipv6.prefixes_str }}])
                        then reject;
                    {% else %}
                        reject;
                    {% endif %}
                }
            {% endif %}

            {% if session.communities_for_announced_routes is defined %}
                {% for comm in session.communities_for_announced_routes %}
                    {% if comm.prefix == "all" %}
                        {% for community in comm.communities %}
                            bgp_community.add(({{ community[0] }}, {{ community[1] }}));
                        {% endfor %}
                        {% for community in comm.large_communities %}
                            bgp_large_community.add(({{ community[0] }}, {{ community[1] }} , {{ community[2] }}));
                        {% endfor %}
                    {% else %}
                        if net ~ [ {{ comm.prefix }} ] then {
                            {% for community in comm.communities %}
                                bgp_community.add(({{ community[0] }}, {{ community[1] }}));
                            {% endfor %}
                            {% for community in comm.large_communities %}
                                bgp_large_community.add(({{ community[0] }}, {{ community[1] }} , {{ community[2] }}));
                            {% endfor %}
                        }
                    {% endif %}
                {% endfor %}
            {% endif %}

            bgp_local_pref = {{ session.local_pref }};

            accept;
        }
    {% endif %}

    {% if session.type != "internal" %}
        filter bgp_out_{{ session.type }}_{{ session.name }} {
            {% if session.type == "transit" %}
                if ! export_transit() then reject;
                {% if session.backup %}
                    bgp_path.prepend(MY_AS);
                {% endif %}
            {% elif session.type == "customer" %}
                {% if session.export_policy == "default_only" %}
                    if ! export_customer_default() then reject;
                {% elif session.export_policy == "full_routes" %}
                    if ! export_customer_full(false) then reject;
                {% elif session.export_policy == "full_routes_plus_default" %}
                    if ! export_customer_full(true) then reject;
                {% else %}
                    reject;
                {% endif %}
            {% elif session.type == "collector" %}
                if ! export_customer_full(false) then reject;
            {% elif session.type == "peer" %}
                if ! export_peer() then reject;
            {% endif %}

            apply_export_communities({{ session.asn }});

            {% if session.prepends is defined %}
                {% for n in range(session.prepends) %}
                    bgp_path.prepend(MY_AS);
                {% endfor %}
            {% endif %}

            accept;
        }
    {% endif %}

    {% if session.ipv4 is defined %}
        protocol bgp bgp_{{ session.type }}_{{ session.name }}_v4 {
            {% if session.multihop %}
                multihop;
            {% endif %}
            ipv4 {
                {% if session.stop_bgp %}
                    import table;
                    import keep filtered;
                    import none;
                    export none;
                {% else %}
                    {% if session.type == "internal" %}
                        import all;
                        export all;
                    {% elif session.type == "collector" %}
                        import none;
                        export filter bgp_out_{{ session.type }}_{{ session.name }};
                    {% else %}
                        import table;
                        import keep filtered;
                        import filter bgp_in_{{ session.type }}_{{ session.name }};
                        {% if session.ipv4.prefix_limit is defined %}
                            import limit {{ session.ipv4.prefix_limit }} action block;
                        {% endif %}
                        export filter bgp_out_{{ session.type }}_{{ session.name }};
                    {% endif %}
                {% endif %}
                {% if session.ipv4.next_hop_self %}
                    next hop self;
                {% endif %}
            };

            {% if session.ipv4.password is defined %}
                password "{{ session.ipv4.password }}";
            {% endif %}
            local as MY_AS;
            {% if session.ipv4.peer_port is defined %}
                neighbor port {{ session.ipv4.peer_port }};
            {% endif %}
            {% if session.type == "internal" %}
                neighbor {{ session.ipv4.peer_ip }} as MY_AS;
            {% else %}
                neighbor {{ session.ipv4.peer_ip }} as {{ session.asn }};
            {% endif %}
            {% if session.ipv4.source_ip is defined %}
                source address {{ session.ipv4.source_ip }};
            {% endif %}
            {% if session.asn == config.asn %}
                rr client;
            {% endif %}
            {% if session.hold_time is defined %}
                hold time {{ session.hold_time }};
            {% endif %}
            {% if session.keepalive_time is defined %}
                keepalive time {{ session.keepalive_time }};
            {% endif %}
            {% if session.type != "route_server" and session.type != "internal" %}
                enforce first as;
            {% endif %}
        }
    {% endif %}

    {% if session.ipv6 is defined %}
        protocol bgp bgp_{{ session.type }}_{{ session.name }}_v6 {
            {% if session.multihop %}
                multihop;
            {% endif %}
            ipv6 {
                {% if session.stop_bgp %}
                    import table;
                    import keep filtered;
                    import none;
                    export none;
                {% else %}
                    {% if session.type == "internal" %}
                        import all;
                        export all;
                    {% elif session.type == "collector" %}
                        import none;
                        export filter bgp_out_{{ session.type }}_{{ session.name }};
                    {% else %}
                        import table;
                        import keep filtered;
                        import filter bgp_in_{{ session.type }}_{{ session.name }};
                        {% if session.ipv6.prefix_limit is defined %}
                            import limit {{ session.ipv6.prefix_limit }} action block;
                        {% endif %}
                        export filter bgp_out_{{ session.type }}_{{ session.name }};
                    {% endif %}
                {% endif %}
                {% if session.ipv6.next_hop_self %}
                    next hop self;
                {% endif %}
            };

            {% if session.ipv6.password is defined %}
                password "{{ session.ipv6.password }}";
            {% endif %}
            local as MY_AS;
            {% if session.ipv6.peer_port is defined %}
                neighbor port {{ session.ipv6.peer_port }};
            {% endif %}
            {% if session.type == "internal" %}
                neighbor {{ session.ipv6.peer_ip }} as MY_AS;
            {% else %}
                neighbor {{ session.ipv6.peer_ip }} as {{ session.asn }};
            {% endif %}
            {% if session.ipv6.source_ip is defined %}
                source address {{ session.ipv6.source_ip }};
            {% endif %}
            {% if session.asn == config.asn %}
                rr client;
            {% endif %}
            {% if session.hold_time is defined %}
                hold time {{ session.hold_time }};
            {% endif %}
            {% if session.keepalive_time is defined %}
                keepalive time {{ session.keepalive_time }};
            {% endif %}
            {% if session.type != "route_server" and session.type != "internal" %}
                enforce first as;
            {% endif %}
        }
    {% endif %}
{% endfor %}